// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Post, User, Comment } from "./prisma-client";
import { AuthPayload, Context } from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type FeedResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post[] | Promise<Post[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | Promise<Post[]>;
      };

  export type PostsResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post[] | Promise<Post[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | Promise<Post[]>;
      };

  export type DraftsResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post[] | Promise<Post[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | Promise<Post[]>;
      };

  export type MeResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export interface Type {
    feed:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | Promise<Post[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post[] | Promise<Post[]>;
        };

    posts:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | Promise<Post[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post[] | Promise<Post[]>;
        };

    drafts:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | Promise<Post[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post[] | Promise<Post[]>;
        };

    me:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };
  }
}

export namespace PostResolvers {
  export const defaultResolvers = {
    id: (parent: Post) => parent.id,
    title: (parent: Post) => parent.title,
    published: (parent: Post) => parent.published
  };

  export type IdResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type TitleResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type PublishedResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type AuthorResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type CommentsResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<Comment | null> | Promise<Array<Comment | null>>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Comment | null> | Promise<Array<Comment | null>>;
      };

  export interface Type {
    id:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    title:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    published:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    author:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    comments:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Comment | null> | Promise<Array<Comment | null>>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<Comment | null> | Promise<Array<Comment | null>>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    name: (parent: User) => parent.name
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type PostResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post[] | Promise<Post[]>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | Promise<Post[]>;
      };

  export type CommentsResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<Comment | null> | Promise<Array<Comment | null>>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Comment | null> | Promise<Array<Comment | null>>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    post:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | Promise<Post[]>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post[] | Promise<Post[]>;
        };

    comments:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Comment | null> | Promise<Array<Comment | null>>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<Comment | null> | Promise<Array<Comment | null>>;
        };
  }
}

export namespace CommentResolvers {
  export const defaultResolvers = {
    id: (parent: Comment) => parent.id,
    text: (parent: Comment) => parent.text
  };

  export type IdResolver =
    | ((
        parent: Comment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Comment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type TextResolver =
    | ((
        parent: Comment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Comment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type WrittenByResolver =
    | ((
        parent: Comment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Comment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export interface Type {
    id:
      | ((
          parent: Comment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Comment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    text:
      | ((
          parent: Comment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Comment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    writtenBy:
      | ((
          parent: Comment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Comment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface CreatePostInput {
    title: string;
    published: boolean;
  }
  export interface SignUpInput {
    email: string;
    password: string;
    name: string;
  }
  export interface LoginInput {
    email: string;
    password: string;
  }

  export interface ArgsCreateDraft {
    input: CreatePostInput;
  }

  export interface ArgsDeletePost {
    id: string;
  }

  export interface ArgsPublish {
    id: string;
  }

  export interface ArgsSignup {
    input: SignUpInput;
  }

  export interface ArgsLogin {
    input: LoginInput;
  }

  export type CreateDraftResolver =
    | ((
        parent: undefined,
        args: ArgsCreateDraft,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post | Promise<Post>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateDraft,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | Promise<Post>;
      };

  export type DeletePostResolver =
    | ((
        parent: undefined,
        args: ArgsDeletePost,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post | null | Promise<Post | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeletePost,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | null | Promise<Post | null>;
      };

  export type PublishResolver =
    | ((
        parent: undefined,
        args: ArgsPublish,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post | Promise<Post>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsPublish,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | Promise<Post>;
      };

  export type SignupResolver =
    | ((
        parent: undefined,
        args: ArgsSignup,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthPayload | null | Promise<AuthPayload | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsSignup,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | null | Promise<AuthPayload | null>;
      };

  export type LoginResolver =
    | ((
        parent: undefined,
        args: ArgsLogin,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthPayload | null | Promise<AuthPayload | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | null | Promise<AuthPayload | null>;
      };

  export interface Type {
    createDraft:
      | ((
          parent: undefined,
          args: ArgsCreateDraft,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | Promise<Post>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateDraft,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post | Promise<Post>;
        };

    deletePost:
      | ((
          parent: undefined,
          args: ArgsDeletePost,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | null | Promise<Post | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeletePost,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post | null | Promise<Post | null>;
        };

    publish:
      | ((
          parent: undefined,
          args: ArgsPublish,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | Promise<Post>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsPublish,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post | Promise<Post>;
        };

    signup:
      | ((
          parent: undefined,
          args: ArgsSignup,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | null | Promise<AuthPayload | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsSignup,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AuthPayload | null | Promise<AuthPayload | null>;
        };

    login:
      | ((
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | null | Promise<AuthPayload | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsLogin,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AuthPayload | null | Promise<AuthPayload | null>;
        };
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    user: (parent: AuthPayload) => parent.user,
    token: (parent: AuthPayload) =>
      parent.token === undefined ? null : parent.token
  };

  export type TokenResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type UserResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export interface Type {
    token:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    user:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Post: PostResolvers.Type;
  User: UserResolvers.Type;
  Comment: CommentResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
